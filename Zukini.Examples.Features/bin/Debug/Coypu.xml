<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Coypu</name>
    </assembly>
    <members>
        <member name="T:Coypu.BrowserWindow">
            <summary>
            A browser window belonging to a particular browser session
            </summary>
        </member>
        <member name="T:Coypu.Scope">
            <summary>
            The scope for any browser interaction: a browser window, frame or element.
            </summary>
        </member>
        <member name="M:Coypu.Scope.ClickButton(System.String,Coypu.Options)">
            <summary>
            Click a button, input of type button|submit|image or div with the css class "button"
            </summary>
            <param name="locator">The text/value, name or id of the button</param>
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
            <exception cref="T:Coypu.MissingHtmlException">Thrown if the element cannot be found</exception>
        </member>
        <member name="M:Coypu.Scope.ClickLink(System.String,Coypu.Options)">
            <summary>
            Click the first matching link
            </summary>
            <param name="locator">The text of the link</param>
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
            <exception cref="T:Coypu.MissingHtmlException">Thrown if the element cannot be found</exception>
        </member>
        <member name="M:Coypu.Scope.FindButton(System.String,Coypu.Options)">
            <summary>
            Find the first input of type button|submit|image or div with the css class "button" to appear within the configured timeout .
            </summary>
            <param name="locator">The text/value, name or id of the button</param>
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
            <returns>A button</returns>
        </member>
        <member name="M:Coypu.Scope.FindLink(System.String,Coypu.Options)">
            <summary>
            Find the first matching link to appear within the configured timeout
            </summary>
            <param name="locator">The text of the link</param>
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
            <returns>A link</returns>
        </member>
        <member name="M:Coypu.Scope.FindField(System.String,Coypu.Options)">
            <summary>
            Find the first form field of any type to appear within the configured timeout
            </summary>
            <param name="locator">The text of the associated label element, the id or name (except radio buttons), the placeholder text, the value of a radio button or checkbox</param>
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
            <returns>A form field</returns>
        </member>
        <member name="M:Coypu.Scope.FillIn(System.String,Coypu.Options)">
            <summary>
            Find the first matching text field to appear within the configured timeout to fill in.
            </summary>
            <param name="locator">The text of the associated label element, the id or name, the placeholder text</param>
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
            <returns>With</returns>
            <exception cref="T:Coypu.MissingHtmlException">Thrown if the element cannot be found</exception>
        </member>
        <member name="M:Coypu.Scope.Select(System.String,Coypu.Options)">
            <summary>
            Select an option from a select element
            </summary>
            <param name="option">The text or value of the option to select</param>
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
            <returns>From</returns>
            <exception cref="T:Coypu.MissingHtmlException">Thrown if the element cannot be found</exception>
        </member>
        <member name="M:Coypu.Scope.HasContent(System.String,Coypu.Options)">
            <summary>
            Query whether text appears on the page within the configured timeout
            </summary>
            <param name="text">The exact text to find</param>
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
            <returns>Whether the text appears</returns>
        </member>
        <member name="M:Coypu.Scope.HasContentMatch(System.Text.RegularExpressions.Regex,Coypu.Options)">
            <summary>
            Query whether text appears on the page using a regular expression within the configured timeout
            </summary>
            <param name="pattern">The regular expression to match</param>
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
            <returns>Whether the page text matches</returns>
        </member>
        <member name="M:Coypu.Scope.HasNoContent(System.String,Coypu.Options)">
            <summary>
            Query whether text does not appear on the page. Returns as soon as the text does not appear, or when the <see cref="!:SessionConfiguration.Timeout"/> is reached.
            </summary>
            <param name="text">The exact text expected not to be found</param>
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
            <returns>Whether the text does not appear</returns>
        </member>
        <member name="M:Coypu.Scope.HasNoContentMatch(System.Text.RegularExpressions.Regex,Coypu.Options)">
            <summary>
            Query whether text does not appear on the page using a regular expression. Returns as soon as the text does not appear, or when the <see cref="!:SessionConfiguration.Timeout"/> is reached.
            </summary>
            <param name="pattern">The regular expression expected not to match</param>
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
            <returns>Whether the text does not appear</returns>
        </member>
        <member name="M:Coypu.Scope.FindCss(System.String,Coypu.Options)">
            <summary>
            Find an element matching a CSS selector
            </summary>
            <param name="cssSelector">CSS selector</param>
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
            <returns>The first matching element</returns>
        </member>
        <member name="M:Coypu.Scope.FindCss(System.String,System.String,Coypu.Options)">
            <summary>
            Find an element matching a CSS selector
            </summary>
            <param name="cssSelector">CSS selector</param>
            <param name="text">The text of the element must exactly match this text</param>
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
            <returns>The first matching element</returns>
        </member>
        <member name="M:Coypu.Scope.FindCss(System.String,System.Text.RegularExpressions.Regex,Coypu.Options)">
            <summary>
            Find an element matching a CSS selector
            </summary>
            <param name="cssSelector">CSS selector</param>
            <param name="text">The text of the element must match this pattern</param>
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
            <returns>The first matching element</returns>
        </member>
        <member name="M:Coypu.Scope.FindXPath(System.String,Coypu.Options)">
            <summary>
            Find an element matching an XPath query
            </summary>
            <param name="xpath">XPath query</param>
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
            <returns>The first matching element</returns>
        </member>
        <member name="M:Coypu.Scope.FindAllCss(System.String,System.Func{System.Collections.Generic.IEnumerable{Coypu.SnapshotElementScope},System.Boolean},Coypu.Options)">
            <summary>
            Find all elements matching a CSS selector. If a predicate is supplied this will wait until the predicate matches, otherwise this will return immediately.
            </summary>
            <param name="cssSelector">CSS selector</param>
            <param name="predicate">A predicate to test the entire collection against. It will wait for this predicate before returning a list of matching elements.</param>
            <param name="options">
              <para>Override the way Coypu is configured to find elements for this call only.</para>
              <para>E.g. A longer wait:</para>
            
              <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
            <returns>All matching elements as snapshot scopes which will not respect future changes in the document</returns>
        </member>
        <member name="M:Coypu.Scope.FindAllXPath(System.String,System.Func{System.Collections.Generic.IEnumerable{Coypu.SnapshotElementScope},System.Boolean},Coypu.Options)">
            <summary>
            Find all elements matching an XPath query. If a predicate is supplied this will wait until the predicate matches, otherwise this will return immediately.
            </summary>
            <param name="xpath">XPath query</param>
            <param name="options">
              <para>Override the way Coypu is configured to find elements for this call only.</para>
              <para>E.g. A longer wait:</para>
            
              <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
            <returns>All matching elements</returns>
        </member>
        <member name="M:Coypu.Scope.FindSection(System.String,Coypu.Options)">
             <summary>
             <para>Find the first matching section to appear within the configured timeout.</para>
             <para>Sections are identified by the text of their child heading element, or by id.</para>
             <para>E.g. to find this:
             
             <code>    
                 &lt;div&gt;	
                     &lt;h2&gt;Search results&lt;/h2&gt;
                     ...
                 &lt;/div&gt;</code>
            
             or this:
            
             <code>
                 &lt;section&gt;
                     &lt;h3&gt;Search results&lt;/h3&gt;
                     ...
                 &lt;/section&gt;</code>
             </para>
             <para>use this:</para>
             <para>
             <code>    FindSection("Search results")</code>
             </para>
             </summary>
             <param name="locator">The text of a child heading element or section id</param>
             <param name="options">
             <para>Override the way Coypu is configured to find elements for this call only.</para>
             <para>E.g. A longer wait:</para>
             
             <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
             <returns>An element</returns>
        </member>
        <member name="M:Coypu.Scope.FindFieldset(System.String,Coypu.Options)">
            <summary>
            <para>Find the first matching fieldset to appear within the configured timeout.</para>
            <para>Fieldsets are identified by the text of their child legend element, or by id.</para>
            <para>E.g. to find this:
            
            <code>    
                &lt;fieldset&gt;	
                    &lt;legend&gt;Advanced search&lt;/legend&gt;
                    ...
                &lt;/fieldset&gt;</code>
            </para>
            <para>use this:</para>
            <para>
            <code>    FindFieldset("Advanced search")</code>
            </para>
            </summary>
            <param name="locator">The text of a child legend element or fieldset id</param>
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
            <returns>An element</returns>
        </member>
        <member name="M:Coypu.Scope.FindFrame(System.String,Coypu.Options)">
            <summary>
            <para>Find the first matching frame or iframe to appear within the configured timeout.</para>
            <para>Frames are identified by the their id, name or title attributes, by their loaded page title, or by the text of the &lt;h1&gt; element in their content.</para>
            <para>E.g. to find this:
            
            <code>    
                &lt;iframe id="myFrame" title="My I Frame" src="..."&gt;	
                    &lt;h1&gt;My Frame Header&lt;/h1&gt;
                    ...
                &lt;/iframe&gt;
            </code>
            </para>
            <para>use one of these:
            
            <code>    
                    Findframe("myFrame")
                    Findframe("My I Frame")
                    Findframe("My Frame Header")
            </code>
            </para>
            </summary>
            <param name="locator">The text of a child legend element or fieldset id</param>
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
            <returns>An element</returns>
        </member>
        <member name="M:Coypu.Scope.FindId(System.String,Coypu.Options)">
            <summary>
            Find the first matching element with specified id to appear within the configured timeout
            </summary>
            <param name="id">Element id</param>
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
            <returns>An element</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Coypu.Scope.FindIdEndingWith(System.String,Coypu.Options)" -->
        <member name="M:Coypu.Scope.Check(System.String,Coypu.Options)">
            <summary>
            Check the first checkbox to appear within the configured timeout matching the text of the associated label element, the id, name or value.
            </summary>
            <param name="locator">The text of the associated label element, the id or name</param>
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
            <exception cref="T:Coypu.MissingHtmlException">Thrown if the element cannot be found</exception>
        </member>
        <member name="M:Coypu.Scope.Uncheck(System.String,Coypu.Options)">
            <summary>
            Uncheck the first checkbox to appear within the configured timeout matching the text of the associated label element, the id, name.
            </summary>
            <param name="locator">The text of the associated label element, the id or name</param>
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
            <exception cref="T:Coypu.MissingHtmlException">Thrown if the element cannot be found</exception>
        </member>
        <member name="M:Coypu.Scope.Choose(System.String,Coypu.Options)">
            <summary>
            Choose the first radio button to appear within the configured timeout matching the text of the associated label element, the id or the value.
            </summary>
            <param name="locator">The text of the associated label element, the id or name</param>
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
            <exception cref="T:Coypu.MissingHtmlException">Thrown if the element cannot be found</exception>
        </member>
        <member name="M:Coypu.Scope.RetryUntilTimeout(System.Action,Coypu.Options)">
            <summary>
            <para>Retry an action on any exception until it succeeds. Once the <see cref="!:SessionConfiguration.Timeout"/> is passed any exception will be rethrown.</para>
            <para>Waits for the <see cref="!:SessionConfiguration.RetryInterval"/> between retries</para>
            </summary>
            <param name="action">An action</param>
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
        </member>
        <member name="M:Coypu.Scope.RetryUntilTimeout(Coypu.Actions.BrowserAction)">
            <summary>
            <para>Retry an action on any exception until it succeeds. Once the <see cref="!:SessionConfiguration.Timeout"/> is passed any exception will be rethrown.</para>
            <para>Waits for the <see cref="!:SessionConfiguration.RetryInterval"/> between retries</para>
            </summary>
            <param name="action">An action</param>
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
        </member>
        <member name="M:Coypu.Scope.RetryUntilTimeout``1(System.Func{``0},Coypu.Options)">
            <summary>
            <para>Retry a function on any exception until it succeeds. Once the <see cref="!:SessionConfiguration.Timeout"/> is passed any exception will be rethrown.</para>
            <para>Waits for the <see cref="!:SessionConfiguration.RetryInterval"/> between retries</para>
            </summary>
            <param name="function">A function</param>
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
        </member>
        <member name="M:Coypu.Scope.Query``1(Coypu.Queries.Query{``0})">
            <summary>
            <para>Execute a query repeatedly until either the expected result is returned or the <see cref="!:SessionConfiguration.Timeout"/> is passed.</para>
            <para>Once the <see cref="!:SessionConfiguration.Timeout"/> is passed any result will be returned or any exception will be rethrown.</para>
            <para>Waits for the <see cref="!:SessionConfiguration.RetryInterval"/> between retries.</para>
            </summary>
            <param name="query">A query</param>
        </member>
        <member name="M:Coypu.Scope.Query``1(System.Func{``0},``0,Coypu.Options)">
            <summary>
            <para>Execute a query repeatedly until either the expected result is returned or the <see cref="!:SessionConfiguration.Timeout"/> is passed.</para>
            <para>Once the <see cref="!:SessionConfiguration.Timeout"/> is passed any result will be returned or any exception will be rethrown.</para>
            <para>Waits for the <see cref="!:SessionConfiguration.RetryInterval"/> between retries.</para>
            </summary>
            <param name="query">A query</param>
            <param name="expecting">Expected result</param>
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
        </member>
        <member name="M:Coypu.Scope.TryUntil(System.Action,System.Func{System.Boolean},System.TimeSpan,Coypu.Options)">
            <summary>
            <para>Execute an action repeatedly until a condition is met.</para>
            <para>Allows the time specified in <paramref name="waitBeforeRetry"/> for the <paramref name="until"/> condition to be met before each retry.</para>
            <para>Once the <see cref="!:SessionConfiguration.Timeout"/> is passed a Coypu.MissingHtmlException will be thrown.</para>
            </summary>
            <param name="tryThis">The action to try</param>
            <param name="until">The condition to be met</param>
            <param name="waitBeforeRetry">How long to wait for the condition to be met before retrying</param>        
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
            <exception cref="T:Coypu.MissingHtmlException">Thrown if the until condition is never met</exception>
        </member>
        <member name="M:Coypu.Scope.TryUntil(Coypu.Actions.BrowserAction,Coypu.Queries.PredicateQuery,Coypu.Options)">
            <summary>
            <para>Execute an action repeatedly until a condition is met.</para>
            <para>Allows the time specified in <paramref name="waitBeforeRetry"/> for the <paramref name="until"/> query to return the expected value before each retry.</para>
            <para>Once the <see cref="!:SessionConfiguration.Timeout"/> is passed a Coypu.MissingHtmlException will be thrown.</para>
            </summary>
            <param name="tryThis">The action to try</param>
            <param name="until">The condition to be met</param>
            <param name="waitBeforeRetry">How long to wait for the condition to be met before retrying</param>        
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
            <exception cref="T:Coypu.MissingHtmlException">Thrown if the until condition is never met</exception>
        </member>
        <member name="M:Coypu.Scope.FindState(Coypu.State[])">
            <summary>
            <para>Find the first from a list of possible states that your page may arrive at.</para>
            <para>Returns as soon as any of the possible states is found.</para>
            <para>E.g.:</para>
            
            <code>  
             var signedIn = new State(() => browser.HasContent("Signed in as:"));
             var signedOut = new State(() => browser.HasContent("Please sign in"));
             
             if (browser.FindState(signedIn,signedOut) == signedIn) 
             {
               browser.ClickLink("Sign out");
             }
             </code>
             </summary>
            <param name="states">The possible states you are expecting</param>
            <returns></returns>
        </member>
        <member name="M:Coypu.Scope.FindState(Coypu.State[],Coypu.Options)">
            <summary>
            <para>Find the first from a list of possible states that your page may arrive at.</para>
            <para>Returns as soon as any of the possible states is found.</para>
            <para>E.g.:</para>
            
            <code>  
             var signedIn = new State(browser.HasContent("Signed in as:"));
             var signedOut = new State(browser.HasContent("Please sign in"));
             
             if (browser.FindState(signedIn,signedOut) == signedIn) 
             {
               browser.ClickLink("Sign out");
             }
             </code>
             </summary>
            <param name="states">The possible states you are expecting</param>
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
            <returns></returns>
            <exception cref="T:Coypu.MissingHtmlException">Thrown if the none of the states are reached within the timeout</exception>
        </member>
        <member name="M:Coypu.Scope.ClickButton(System.String,Coypu.Queries.PredicateQuery,Coypu.Options)">
            <summary>
            <para>Click a button, input of type button|submit|image or div with the css class "button".</para>
            <para>Wait for a condition to be satisfied for a specified time otherwise click and wait again.</para>
            <para>Continues until the expected condition is satisfied or the <see cref="!:SessionConfiguration.Timeout"/> is reached.</para>
            </summary>
            <param name="locator">The text/value, name or id of the button</param>
            <param name="until">The condition to be satisfied</param>
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
            <returns>The first matching button</returns>
            <exception cref="T:Coypu.MissingHtmlException">Thrown if the element cannot be found</exception>
        </member>
        <member name="M:Coypu.Scope.ClickLink(System.String,Coypu.Queries.PredicateQuery,Coypu.Options)">
            <summary>
            <para>Click a link and wait for a condition to be satisfied for a specified time otherwise click and wait again.</para> 
            <para>Continues until the expected condition is satisfied or the <see cref="!:SessionConfiguration.Timeout"/> is reached.</para>
            </summary>
            <param name="locator">The text of the link</param>
            <param name="until">The condition to be satisfied</param>
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
            <returns>The first matching button</returns>
            <exception cref="T:Coypu.MissingHtmlException">Thrown if the element cannot be found</exception>
        </member>
        <member name="M:Coypu.Scope.Now">
            <summary>
            Try and find this scope now
            </summary>
            <returns>The element found</returns>
            <exception cref="T:Coypu.MissingHtmlException">Thrown if the element cannot be found</exception>
        </member>
        <member name="P:Coypu.Scope.Location">
            <summary>
            The location of the current browser window
            </summary>
        </member>
        <member name="M:Coypu.DriverScope.Now">
            <summary>
            Try and find this scope now
            </summary>
            <returns></returns>
            <exception cref="T:Coypu.MissingHtmlException">Thrown if the element cannot be found</exception>
            <exception cref="T:Coypu.AmbiguousHtmlException">Thrown if the there is more than one matching element and the Match.Single option is set</exception>
        </member>
        <member name="M:Coypu.BrowserWindow.HasDialog(System.String,Coypu.Options)">
            <summary>
            Check that a dialog with the specified text appears within the <see cref="!:SessionConfiguration.Timeout"/>
            </summary>
            <param name="withText">Dialog text</param>
            <returns>Whether an element appears</returns>
        </member>
        <member name="M:Coypu.BrowserWindow.HasNoDialog(System.String,Coypu.Options)">
            <summary>
            Check that a dialog with the specified is not present. Returns as soon as the dialog is not present, or when the <see cref="!:SessionConfiguration.Timeout"/> is reached.
            </summary>
            <param name="withText">Dialog text</param>
            <returns>Whether an element does not appears</returns>
        </member>
        <member name="M:Coypu.BrowserWindow.AcceptModalDialog(Coypu.Options)">
            <summary>
            Accept the first modal dialog to appear within the <see cref="!:SessionConfiguration.Timeout"/>
            </summary>
            <exception cref="T:Coypu.MissingHtmlException">Thrown if the dialog cannot be found</exception>
        </member>
        <member name="M:Coypu.BrowserWindow.CancelModalDialog(Coypu.Options)">
            <summary>
            Cancel the first modal dialog to appear within the <see cref="!:SessionConfiguration.Timeout"/>
            </summary>
            <exception cref="T:Coypu.MissingHtmlException">Thrown if the dialog cannot be found</exception>
        </member>
        <member name="M:Coypu.BrowserWindow.Visit(System.String)">
            <summary>
            Visit a url in the browser
            </summary>
            <param name="virtualPath">Virtual paths will use the SessionConfiguration.AppHost,Port,SSL settings. Otherwise supply a fully qualified URL.</param>
        </member>
        <member name="M:Coypu.BrowserWindow.GoBack">
            <summary>
            Navigate back to the previous location in the browser's history
            </summary>
        </member>
        <member name="M:Coypu.BrowserWindow.GoForward">
            <summary>
            Navigate forward to the next location in the browser's history
            </summary>
        </member>
        <member name="M:Coypu.BrowserWindow.ExecuteScript(System.String,System.Object[])">
            <summary>
            Executes custom javascript in the browser
            </summary>
            <param name="javascript">JavaScript to execute</param>
            <param name="args">Script arguments to be passed down to the browser</param>
            <returns>Anything returned from the script</returns>
        </member>
        <member name="M:Coypu.BrowserWindow.MaximiseWindow">
            <summary>
            Maximises this browser window
            </summary>
        </member>
        <member name="M:Coypu.BrowserWindow.ResizeTo(System.Int32,System.Int32)">
            <summary>
            Resizes this browser window to the supplied dimensions
            </summary>
            <param name="width">The required width</param>
            <param name="height">The required height</param>
        </member>
        <member name="M:Coypu.BrowserWindow.Refresh">
            <summary>
            Refreshes the current browser window page
            </summary>
        </member>
        <member name="M:Coypu.BrowserWindow.Exists(Coypu.Options)">
            <summary>
            <para>Check if this window exists within the <see cref="!:SessionConfiguration.Timeout"/></para>
            </summary>
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
        </member>
        <member name="M:Coypu.BrowserWindow.Missing(Coypu.Options)">
            <summary>
            <para>Check if this window becomes missing within the <see cref="!:SessionConfiguration.Timeout"/></para>
            </summary>
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
        </member>
        <member name="P:Coypu.BrowserWindow.Title">
            <summary>
            Returns the page's title displayed in the browser
            </summary>
        </member>
        <member name="T:Coypu.Element">
            <summary>
            An HTML element
            </summary>
        </member>
        <member name="P:Coypu.Element.Id">
            <summary>
            The value of the 'id' attribute
            </summary>
        </member>
        <member name="P:Coypu.Element.Text">
            <summary>
            The inner text of the element
            </summary>
        </member>
        <member name="P:Coypu.Element.Value">
            <summary>
            The value of the 'value' attribute
            </summary>
        </member>
        <member name="P:Coypu.Element.Name">
            <summary>
            The value of the 'name' attribute
            </summary>
        </member>
        <member name="P:Coypu.Element.SelectedOption">
            <summary>
            The selected option - applies to select elements only
            </summary>
        </member>
        <member name="P:Coypu.Element.Selected">
            <summary>
            Whether the element is selected
            </summary>
        </member>
        <member name="P:Coypu.Element.Native">
            <summary>
            The native element returned by your chosen driver
            </summary>
        </member>
        <member name="P:Coypu.Element.Item(System.String)">
            <summary>
            The attributes of the HTML element
            </summary>
        </member>
        <member name="P:Coypu.Element.OuterHTML">
            <summary>
            The outer HTML of the element
            </summary>
        </member>
        <member name="P:Coypu.Element.InnerHTML">
            <summary>
            The inner HTML of the element
            </summary>
        </member>
        <member name="P:Coypu.Element.Title">
            <summary>
            The title of the element
            </summary>
        </member>
        <member name="P:Coypu.Element.Disabled">
            <summary>
            Whether the element is disabled
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Coypu.ElementScope.FillInWith(System.String,Coypu.Options)" -->
        <!-- Badly formed XML comment ignored for member "M:Coypu.ElementScope.SelectOption(System.String,Coypu.Options)" -->
        <member name="T:Coypu.Drivers.Html">
            <summary>
            Construct XPath queries to find different types of HTML element
            </summary>
        </member>
        <member name="T:Coypu.Drivers.XPath">
            <summary>
            Helper for formatting XPath queries
            </summary>
        </member>
        <member name="M:Coypu.Drivers.XPath.Format(System.String,System.Object[])">
            <summary>
            <para>Format an XPath query that uses string values for comparison that may contain single or double quotes</para>
            <para>Wraps the string in the appropriate quotes or uses concat() to separate them if both are present.</para>
            <para>Usage:</para>
            <code>  new XPath().Format(".//element[@attribute1 = {0} and @attribute2 = {1}]",inputOne,inputTwo) </code>
            </summary>
            <param name="value"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Coypu.Drivers.NoSuchBrowserException">
            <summary>
            There is no such browser
            </summary>
        </member>
        <member name="T:Coypu.Match">
            <summary>
            <para>With Match you can control how Coypu behaves when multiple elements match a query.</para>
            <para><code>Match.First</code> just takes the first match and ignores any others</para>
            <para><code>Match.Single</code> throws <code>Coypu.AmbiguousException</code> if there is more than one match</para>
            </summary>
        </member>
        <member name="F:Coypu.Match.First">
            <summary>
            Just picks the first element that matches
            </summary>
        </member>
        <member name="F:Coypu.Match.Single">
            <summary>
            Raises an error if more than one element matches
            </summary>
        </member>
        <member name="T:Coypu.MissingDialogException">
            <summary>
            Thrown whenever some expected HTML cannot be found
            </summary>
        </member>
        <member name="T:Coypu.MissingWindowException">
            <summary>
            Thrown whenever an expected browser window cannot be found
            </summary>
        </member>
        <member name="T:Coypu.SessionConfiguration">
            <summary>
            Global configuration settings
            </summary>
        </member>
        <member name="T:Coypu.Options">
            <summary>
            Options for how Coypu interacts with the browser.
            </summary>
        </member>
        <member name="F:Coypu.Options.NoWait">
            <summary>
            Will not wait for asynchronous updates to the page
            </summary>
        </member>
        <member name="F:Coypu.Options.Invisible">
            <summary>
            Include invisible elements when finding
            </summary>
        </member>
        <member name="F:Coypu.Options.FirstExact">
            <summary>
            Match exact visible text; Just picks the first element that matches
            </summary>
        </member>
        <member name="F:Coypu.Options.FirstSubstring">
            <summary>
            Match substring in visible text; Just picks the first element that matches
            </summary>
        </member>
        <member name="F:Coypu.Options.FirstPreferExact">
            <summary>
            Prefer exact text matches to substring matches; Just picks the first element that matches
            </summary>
        </member>
        <member name="F:Coypu.Options.SingleExact">
            <summary>
            Match exact visible text; Raises an error if more than one element match
            </summary>
        </member>
        <member name="F:Coypu.Options.SingleSubstring">
            <summary>
            Match by substring in visible text; Raises an error if more than one element match
            </summary>
        </member>
        <member name="F:Coypu.Options.SinglePreferExact">
            <summary>
            Prefer exact text matches to substring matches; Raises an error if more than one element match
            </summary>
        </member>
        <member name="M:Coypu.Options.Merge(Coypu.Options,Coypu.Options)">
            <summary>
            Merge any unset Options from another set of Options.
            </summary>
            <param name="preferredOptions">The preferred set of options</param>
            <param name="defaultOptions">Any unset preferred options will be copied from this</param>
            <returns>The new merged Options</returns>
        </member>
        <member name="P:Coypu.Options.First">
            <summary>
            Just picks the first element that matches
            </summary>
        </member>
        <member name="P:Coypu.Options.Single">
            <summary>
            Raises an error if more than one element match
            </summary>
        </member>
        <member name="P:Coypu.Options.Exact">
            <summary>
            Match by exact visible text
            </summary>
        </member>
        <member name="P:Coypu.Options.Substring">
            <summary>
            Match by substring in visible text
            </summary>
        </member>
        <member name="P:Coypu.Options.PreferExact">
            <summary>
            If multiple matches are found, some of which are exact, and some of which are not, then the first exactly matching element is returned
            </summary>
        </member>
        <member name="P:Coypu.Options.Timeout">
            <summary>
            <para>When retrying, how long to wait for elements to appear or actions to complete without error.</para>
            <para>Default: 1sec</para>
            </summary>
        </member>
        <member name="P:Coypu.Options.RetryInterval">
            <summary>
            <para>How long to wait between retries</para>
            <para>Default: 100ms</para>
            </summary>
        </member>
        <member name="P:Coypu.Options.WaitBeforeClick">
            <summary>
            <para>How long to wait between finding an element and clicking it.</para>
            <para>Default: zero</para>
            </summary>
        </member>
        <member name="P:Coypu.Options.ConsiderInvisibleElements">
            <summary>
            <para>By default Coypu will exclude any invisible elements, this allows you to override that behaviour</para>
            <para>Default: true</para>
            </summary>
        </member>
        <member name="P:Coypu.Options.TextPrecision">
            <summary>
            <para>Whether to consider substrings when finding elements by text, or just an exact match.</para>
            </summary>
        </member>
        <member name="P:Coypu.Options.Match">
            <summary>
            <para>With PreventAmbiguousMatches you can control whether Coypu should throw an exception when multiple elements match a query.</para>
            </summary>
        </member>
        <member name="M:Coypu.SessionConfiguration.#ctor">
            <summary>
            New default configuration
            </summary>
        </member>
        <member name="P:Coypu.SessionConfiguration.Browser">
            <summary>
            <para>Specifies the browser you would like to control</para>
            <para>Default: Firefox</para>
            </summary>
        </member>
        <member name="P:Coypu.SessionConfiguration.Driver">
            <summary>
            <para>Specifies the driver you would like to use to control the browser</para> 
            <para>Default: SeleniumWebDriver</para>
            </summary>
        </member>
        <member name="P:Coypu.SessionConfiguration.AppHost">
            <summary>
            <para>The host of the website you are testing, e.g. 'github.com'</para>
            <para>Default: localhost</para>
            </summary>
        </member>
        <member name="P:Coypu.SessionConfiguration.Port">
            <summary>
            <para>The port of the website you are testing</para>
            <para>Default: 80</para>
            </summary>
        </member>
        <member name="P:Coypu.SessionConfiguration.SSL">
            <summary>
            <para>Whether to use the HTTPS protocol to connect to website you are testing</para>
            <para>Default: false</para>
            </summary>
        </member>
        <member name="T:Coypu.Drivers.Browser">
            <summary>
            The browser that will be used by your chosen driver
            </summary>
        </member>
        <member name="T:Coypu.Drivers.BrowserNotSupportedException">
            <summary>
            Thrown when your chosen browser is not supported by your chosen driver
            </summary>
        </member>
        <member name="T:Coypu.StaleElementException">
            <summary>
            Thrown whenever a snapshot element returned from FindAllCss or FindAllXPath has been removed
            from the DOM and cannot be refound due to the snapshot nature of the FindAll methods
            </summary>
        </member>
        <member name="M:Coypu.SynchronisedElementScope.Exists(Coypu.Options)">
            <summary>
            <para>Check if this element exists within the <see cref="!:SessionConfiguration.Timeout"/></para>
            </summary>
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
        </member>
        <member name="M:Coypu.SynchronisedElementScope.Missing(Coypu.Options)">
            <summary>
            <para>Check if this element becomes missing within the <see cref="!:SessionConfiguration.Timeout"/></para>
            </summary>
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
        </member>
        <member name="T:Coypu.SnapshotElementScope">
            <summary>
            The scope of an element already found in the document, therefore not deferred. 
            
            If this element becomes stale then using this scope will not try to refind the element but 
            will raise a MissingHtmlException immediately.
            </summary>
        </member>
        <member name="M:Coypu.FillInWith.With(System.String)">
            <summary>
            Supply a value for the text field
            </summary>
            <param name="value">The value to fill in</param>
            <exception cref="T:Coypu.MissingHtmlException">Thrown if the element cannot be found</exception>
        </member>
        <member name="T:Coypu.MissingHtmlException">
            <summary>
            Thrown whenever some expected HTML cannot be found
            </summary>
        </member>
        <member name="M:Coypu.SelectFrom.From(System.String)">
            <summary>
            Find the first matching select to appear within the SessionConfiguration.Timeout from which to select this option.
            </summary>
            <param name="locator">The text of the associated label element, the id or name</param>
            <exception cref="T:Coypu.MissingHtmlException">Thrown if the element cannot be found</exception>
        </member>
        <member name="T:Coypu.BrowserSession">
            <summary>
            A browser session
            </summary>
        </member>
        <member name="M:Coypu.BrowserSession.#ctor">
            <summary>
            A new browser session. Control the lifecycle of this session with using{} / session.Dispose()
            </summary>
            <returns>The new session with default configuration </returns>
        </member>
        <member name="M:Coypu.BrowserSession.#ctor(Coypu.SessionConfiguration)">
            <summary>
            A new browser session. Control the lifecycle of this session with using{} / session.Dispose()
            </summary>
            <param name="sessionConfiguration">configuration for this session</param>
            <returns>The new session</returns>
        </member>
        <member name="M:Coypu.BrowserSession.#ctor(Coypu.Driver)">
            <summary>
            A new browser session with defined driver.  
            Replaces sessionConfiguration driver.
            </summary>
            <param name="driver"></param>
        </member>
        <member name="M:Coypu.BrowserSession.#ctor(Coypu.SessionConfiguration,Coypu.Driver)">
            <summary>
            A new browser session with defined driver.  
            Replaces sessionConfiguration driver.
            </summary>
            <param name="sessionConfiguration"></param>
            <param name="driver"></param>
        </member>
        <member name="M:Coypu.BrowserSession.SaveWebResource(System.String,System.String)">
            <summary>
            Saves a resource from the web to a local file using the cookies from the current browser session.
            Allows you to sign in through the browser and then directly download a resource restricted to signed-in users.
            </summary>
            <param name="resource"> The location of the resource to download</param>
            <param name="saveAs">Path to save the file to</param>
        </member>
        <member name="M:Coypu.BrowserSession.FindWindow(System.String,Coypu.Options)">
            <summary>
            Find an open browser window or tab by its title or name. If no exact match is found a partial match on title will be considered.
            </summary>
            <param name="locator">Window title or name</param>
            <param name="options">
            <para>Override the way Coypu is configured to find elements for this call only.</para>
            <para>E.g. A longer wait:</para>
            
            <code>new Options{Timeout = TimeSpan.FromSeconds(60)}</code></param>
            <returns>The matching BrowserWindow scope</returns>
        </member>
        <member name="M:Coypu.BrowserSession.Dispose">
            <summary>
            Disposes the current session, closing any open browser.
            </summary>
        </member>
        <member name="P:Coypu.BrowserSession.Driver">
            <summary>
            Access to grand-parent DriverScope's driver.
            </summary>
        </member>
        <member name="P:Coypu.BrowserSession.Native">
            <summary>
            The native driver for the Coypu.Driver / browser combination you supplied. E.g. for SeleniumWebDriver + Firefox it will currently be a OpenQA.Selenium.Firefox.FirefoxDriver.
            </summary>
        </member>
        <member name="T:Coypu.State">
            <summary>
             A possible state for the current page
            </summary>
        </member>
        <member name="M:Coypu.State.#ctor(Coypu.Queries.Query{System.Boolean})">
            <summary>
             Describe a possible state for the page with a condition to identify this state.
            </summary>
            <param name="condition">How to identify this state</param>
        </member>
        <member name="M:Coypu.State.#ctor(System.Func{System.Boolean})">
            <summary>
             Describe a possible state for the page with a condition to identify this state.
            </summary>
            <param name="condition">How to identify this state</param>
        </member>
    </members>
</doc>
